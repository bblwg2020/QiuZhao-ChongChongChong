* 17.电话号码的字母组合
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成54）/截屏2020-07-13 下午9.10.47.png @ 2020-07-13 21:10:50
[[file:Screen-Pictures/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/2020-07-13_21-10-50_%E6%88%AA%E5%B1%8F2020-07-13%20%E4%B8%8B%E5%8D%889.10.47.png]]
** 思路
+ DFS回溯法：dfs(i,s)中i表示递归到第i个数字，s表示前i-1个数字可能组合的字符串，当遍历到数字结尾时，将结果添加到列表中
** code
 #+BEGIN_SRC python
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        dl = len(digits)
        phone = {'2': ['a', 'b', 'c'],
                 '3': ['d', 'e', 'f'],
                 '4': ['g', 'h', 'i'],
                 '5': ['j', 'k', 'l'],
                 '6': ['m', 'n', 'o'],
                 '7': ['p', 'q', 'r', 's'],
                 '8': ['t', 'u', 'v'],
                 '9': ['w', 'x', 'y', 'z']}
        self.ans = []
        def dfs(i, s):
            if i==len(digits):
                self.ans.append(s)
                return
            for c in phone[digits[i]]:
                s += c
                dfs(i+1, s)
		# 回溯
                s = s[:-1]
        dfs(0, '')
        return self.ans
 #+END_SRC
* 401.二进制手表
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成67）/截屏2020-07-15 上午12.56.18.png @ 2020-07-15 00:56:20
[[file:Screen-Pictures/401.%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/2020-07-15_00-56-20_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8A%E5%8D%8812.56.18.png]]
** 思路
[[https://leetcode-cn.com/problems/binary-watch/solution/hui-su-by-bu-hui-er-cha-shu/]]
** code
#+BEGIN_SRC python
class Solution:
    def readBinaryWatch(self, num: int) -> List[str]:
        ans = []
        times = [8,4,2,1,32,16,8,4,2,1]
        # minutes = []
        def dfs(n, hour, minute, k):
            # 跳出条件
            if n==num:
                if minute < 10:
                    ans.append(str(hour)+':0'+str(minute))
                else:
                    ans.append(str(hour)+':'+str(minute))
            if k >= 4:
                for i, m in enumerate(times[k:]):
                    minute += m
                    if minute <= 59:
                        dfs(n+1, hour, minute, k+i+1)
                    minute -= m
            else:
                for i, h in enumerate(times[k:4]):
                    hour += h
                    if hour <= 11:
                        dfs(n+1, hour, minute, k+i+1)
                    # 回溯
                    hour -= h
                for i, m in enumerate(times[4:]):
                    minute += m
                    if minute <= 59:
                        dfs(n+1, hour, minute, 4+i+1)
                    minute -= m
        dfs(0, 0, 0, 0)
        return ans
#+END_SRC
* 39.组合总和
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成66）/截屏2020-07-15 上午12.55.09.png @ 2020-07-15 00:55:11
[[file:Screen-Pictures/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/2020-07-15_00-55-11_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8A%E5%8D%8812.55.09.png]]
** 思路
DFS回溯，考虑路径和超过target时进行剪枝，并且选择的时候为了避免重复，只选取>=当前索引的元素
** code
#+BEGIN_SRC python
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        ans = []
        def dfs(index, path):
            # 跳出条件
            if sum(path)==target:
                path_ = path[:]
                ans.append(path_)
            elif sum(path)<target:
                for i, c in enumerate(candidates[index:]):
                    path.append(c)
                    # 剪枝
                    if sum(path)>target:
                        path.pop()
                        break
                    dfs(index+i, path)
                    path.pop()
        dfs(0, [])
        return ans
#+END_SRC
* 77.组合
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成61）/截屏2020-07-14 下午4.53.56.png @ 2020-07-14 16:53:58
[[file:Screen-Pictures/77.%E7%BB%84%E5%90%88/2020-07-14_16-53-58_%E6%88%AA%E5%B1%8F2020-07-14%20%E4%B8%8B%E5%8D%884.53.56.png]]
** 思路
需要避免重复，因此需要从当前层的第i个+index+1，不能取自己
** code
#+BEGIN_SRC python
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        nums = list(range(1, n+1))
        ans = []
        def dfs(n, index, path):
            if n==k:
                ans.append(path[:])
            for i, c in enumerate(nums[index:]):
                path.append(c)
                dfs(n+1, index+i+1, path)
                path.pop()
        dfs(0, 0, [])
        return ans
#+END_SRC
* 40.组合总和II
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成65）/截屏2020-07-15 上午12.53.47.png @ 2020-07-15 00:53:52
[[file:Screen-Pictures/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/2020-07-15_00-53-52_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8A%E5%8D%8812.53.47.png]]
** 思路
[[https://leetcode-cn.com/problems/combination-sum-ii/solution/hui-su-jian-zhi-by-bu-hui-er-cha-shu/][😄]]
** code
#+BEGIN_SRC python
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        ans = []
        def dfs(index, path):
            # 跳出条件
            if sum(path)==target:
                ans.append(path[:])
            for i, c in enumerate(candidates[index:]):
                # 去除重复的组合
                if i==0 or c!=candidates[index:][i-1]:
                    path.append(c)
                    # 剪枝
                    if sum(path)>target:
                        path.pop()
                        break
                    dfs(index+i+1, path)
                    path.pop()
        dfs(0, [])
        return ans
#+END_SRC
* 组合总和IV
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成64）/截屏2020-07-15 上午12.52.18.png @ 2020-07-15 00:52:20
[[file:Screen-Pictures/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/2020-07-15_00-52-20_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8A%E5%8D%8812.52.18.png]]
** 思路
dp[k]表示组成数目为k的种类有多少，状态转移方程为：dp[k]=sum(dp[k-n] for n in nums)
** code
#+BEGIN_SRC python
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        if not nums:
            return 0
        nums.sort()
        dp = [0 for i in range(target+1)]
        dp[0] = 0
        for amount in range(nums[0], target+1):
            for num in nums:
                if amount>num:
                    dp[amount] += dp[amount-num]
                elif amount==num:
                    dp[amount] += 1
        return dp[target]
#+END_SRC
