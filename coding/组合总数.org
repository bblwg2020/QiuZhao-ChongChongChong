* 17.电话号码的字母组合
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成54）/截屏2020-07-13 下午9.10.47.png @ 2020-07-13 21:10:50
[[file:Screen-Pictures/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/2020-07-13_21-10-50_%E6%88%AA%E5%B1%8F2020-07-13%20%E4%B8%8B%E5%8D%889.10.47.png]]
** 思路
+ DFS回溯法：dfs(i,s)中i表示递归到第i个数字，s表示前i-1个数字可能组合的字符串，当遍历到数字结尾时，将结果添加到列表中
** code
 #+BEGIN_SRC python
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        dl = len(digits)
        phone = {'2': ['a', 'b', 'c'],
                 '3': ['d', 'e', 'f'],
                 '4': ['g', 'h', 'i'],
                 '5': ['j', 'k', 'l'],
                 '6': ['m', 'n', 'o'],
                 '7': ['p', 'q', 'r', 's'],
                 '8': ['t', 'u', 'v'],
                 '9': ['w', 'x', 'y', 'z']}
        self.ans = []
        def dfs(i, s):
            if i==len(digits):
                self.ans.append(s)
                return
            for c in phone[digits[i]]:
                s += c
                dfs(i+1, s)
		# 回溯
                s = s[:-1]
        dfs(0, '')
        return self.ans
 #+END_SRC

