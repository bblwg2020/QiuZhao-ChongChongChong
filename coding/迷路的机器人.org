* 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成98）/截屏2020-06-10 上午10.46.21.png @ 2020-06-10 10:46:28
[[file:Screen-Pictures/%E9%A2%98%E7%9B%AE/2020-06-10_10-46-28_%E6%88%AA%E5%B1%8F2020-06-10%20%E4%B8%8A%E5%8D%8810.46.21.png]]
* 思路
  + DP:每个格子只能由上面或者右边过来，并且上面或者右边的格子不等于1，且存在一条路径。用DP[i][j]保存走到[i,j]格子的路径点列表，如果不存在则为[]
* code
#+BEGIN_SRC python
# DP
class Solution:
    def pathWithObstacles(self, obstacleGrid: List[List[int]]) -> List[List[int]]:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[[] for j in range(n)] for i in range(m)]
        if obstacleGrid[0][0] != 1:
            dp[0][0] = [[0,0]]
        for i in range(m):
            for j in range(n):
                if (i==0 and j==0) or obstacleGrid[i][j] == 1:
                    continue
                if i == 0:
                    if obstacleGrid[i][j-1] != 1 and dp[i][j-1]:
                        dp[i][j] = dp[i][j-1] + [[i, j]]
                elif j == 0:
                    if obstacleGrid[i-1][j] != 1 and dp[i-1][j]:
                        dp[i][j] = dp[i-1][j] + [[i, j]]
                else:
                    if obstacleGrid[i-1][j] != 1 and dp[i-1][j]:
                        dp[i][j] = dp[i-1][j] + [[i, j]]
                    elif obstacleGrid[i][j-1] != 1 and dp[i][j-1]:
                        dp[i][j] = dp[i][j-1] + [[i, j]]
        return dp[m-1][n-1]
#+END_SRC


