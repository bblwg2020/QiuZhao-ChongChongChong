* 题目

#+DOWNLOADED: file:/var/folders/wk/9k90t6fs7kx91_cn9v90hx_00000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成32）/截屏2020-06-24 下午3.32.06.png @ 2020-06-24 15:32:10
[[file:Screen-Pictures/%E9%A2%98%E7%9B%AE/2020-06-24_15-32-10_%E6%88%AA%E5%B1%8F2020-06-24%20%E4%B8%8B%E5%8D%883.32.06.png]]

#+DOWNLOADED: file:/var/folders/wk/9k90t6fs7kx91_cn9v90hx_00000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成33）/截屏2020-06-24 下午3.32.19.png @ 2020-06-24 15:32:23
[[file:Screen-Pictures/%E9%A2%98%E7%9B%AE/2020-06-24_15-32-23_%E6%88%AA%E5%B1%8F2020-06-24%20%E4%B8%8B%E5%8D%883.32.19.png]]

* 思路
*** 回溯法，和39类似
**** 注意每个数字只能选取一次，所以要额外保持索引start，避免重复选取候选数字
* code
#+BEGIN_SRC python
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:

        res = []
        candidates.sort()
        def helper(target, path, start=0):
            if target == 0:
                # res.append(path[:])
                # 注意这里要去重
                tmp = path[:] 
                tmp.sort() 
                if tmp not in res:
                    res.append(tmp)
                return
            # 因为每个数字只能选取一次，所以加入一个开始标记
            # 只能从start位置往后遍历候选集合
            for idx, c in enumerate(candidates[start:]):
                if c > target: 
                    break
                helper(target - c, path + [c, ], start + idx + 1)
        helper(target, [])
        return res
#+END_SRC
