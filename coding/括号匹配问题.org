* 有效的括号
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成68）/截屏2020-07-15 下午4.54.16.png @ 2020-07-15 16:54:18
[[file:Screen-Pictures/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/2020-07-15_16-54-18_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8B%E5%8D%884.54.16.png]]
** 思路
+ 栈存储左括号，遇到相应的右括号出栈。如果最后栈不空，则False；或者途中遇到栈空或者栈顶左括号和当前右括号不匹配，False
** code
 #+BEGIN_SRC python
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        hashmap = {')':'(', '}':'{',']':'['}
        for char in s:
            if char in ['(','{','[']:
                stack.append(char)
                continue
            if char in ['}',')',']'] and stack and stack[-1]==hashmap[char]:
                stack.pop()
                continue
            if char in ['}',')',']'] and not stack:
                return False
            if char in ['}',')',']'] and stack and stack[-1]!=hashmap[char]:
                return False
        return True if not stack else False
 #+END_SRC
* 生成括号
** 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成69）/截屏2020-07-15 下午4.57.03.png @ 2020-07-15 16:57:04
[[file:Screen-Pictures/%E7%94%9F%E6%88%90%E6%8B%AC%E5%8F%B7/2020-07-15_16-57-04_%E6%88%AA%E5%B1%8F2020-07-15%20%E4%B8%8B%E5%8D%884.57.03.png]]
** 思路
+ 回溯法生成字符串，在途中判断是否有效来进行剪枝
+ 判断当前路径的括号字符串是否有效可以记录左括号的数目left，当遇到右括号时left-1，需要保持left一直>=0，否则剪枝，当左括号和右括号的累计数字等于n时，判断left是否为0即可
+ 为了使得括号有效，最开始的必须为'('，所以直接剪枝')'，降低复杂度
** code
 #+BEGIN_SRC python
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        def dfs(left, l, r, path):
            if l==n and r==n and left==0:
                ans.append(path[:])
                return
            if l<n:
                path += '('
                left += 1
                dfs(left, l+1, r, path)
                # 回溯
                left -= 1
                path = path[:-1]
            if r<n:
                path += ')'
                left -= 1
                # 剪枝
                if left >= 0:
                    dfs(left, l, r+1, path)
                # 回溯
                left += 1
                path = path[:-1]
        dfs(1, 1, 0, '(')
        return ans
 #+END_SRC
* 
** 题目
** 思路
** code
 #+BEGIN_SRC python

 #+END_SRC
