* 题目
#+DOWNLOADED: file:/var/folders/73/53s3wczx1l32608prn_fdgrm0000gn/T/TemporaryItems/（screencaptureui正在存储文稿，已完成19）/截屏2020-07-03 下午3.44.50.png @ 2020-07-03 15:44:53
[[file:Screen-Pictures/%E9%A2%98%E7%9B%AE/2020-07-03_15-44-53_%E6%88%AA%E5%B1%8F2020-07-03%20%E4%B8%8B%E5%8D%883.44.50.png]]
* 思路
+ DP(超时):将height&weight组成元组people，对people进行height的排序，这样可以保证第i个人的后面不可能存在能叠在他上面的人，然后类似于求体重的最长的上升子序列一样的方法，用dp[i]表示以第i个人为底，最多能叠加几个人，状态转移为people[i][1] > people[j][1]即可
+ 二分法：
* code
#+BEGIN_SRC python
# DP
class Solution:
    def bestSeqAtIndex(self, height: List[int], weight: List[int]) -> int:
        # DP
        people = [(0, 0) for i in range(len(height))]
        for i, (h, w) in enumerate(zip(height, weight)):
            people[i] = (h, w)
        people.sort(key=lambda x:x[0])
        dp = [1 for i in range(len(people))]
        for i in range(1, len(people)):
            for j in range(0, i):
                if people[i][1] > people[j][1]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)
#+END_SRC
